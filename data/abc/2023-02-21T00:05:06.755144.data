environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\Xuezh\\AppData\\Roaming', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '133174784771779981', 'CHOCOLATEYTOOLSLOCATION': 'C:\\tools', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\.\\pipe\\LOCAL\\crashpad_12864_PMOLGJXUHSUCKWRY', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'SNOW', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'GOPATH': 'C:\\Users\\Xuezh\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\Xuezh', 'LOCALAPPDATA': 'C:\\Users\\Xuezh\\AppData\\Local', 'LOGONSERVER': '\\\\SNOW', 'NUMBER_OF_PROCESSORS': '16', 'ONEDRIVE': 'C:\\Users\\Xuezh\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\Xuezh\\OneDrive', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files (x86)\\Borland\\Delphi7\\Bin;C:\\Program Files (x86)\\Borland\\Delphi7\\Projects\\Bpl\\;G:\\xnj\\bin\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;H:\\BANZIP\\Bandizip\\;C:\\Program Files\\Microsoft Network Monitor 3\\;H:\\Git\\cmd;D:\\redis\\;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\Tesseract-OCR;D:\\ProgramFiles\\wamp\\mysql\\bin;C:\\Program Files\\Go\\bin;H:\\nodejs\\;C:\\Users\\Xuezh\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\;C:\\Users\\Xuezh\\AppData\\Local\\Programs\\Python\\Python310\\;C:\\Users\\Xuezh\\.cargo\\bin;C:\\Users\\Xuezh\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Xuezh\\go\\bin;H:\\upx-3.96-win64;F:\\ffmpeg-master-latest-win64-gpl\\ffmpeg-master-latest-win64-gpl\\bin;G:\\PyCharm Community Edition 2022.1.3\\bin;H:\\nc\\netcat-win32-1.12\\nc.exe;C:\\Users\\Xuezh\\AppData\\Roaming\\Pub\\Cache\\bin;H:\\flutter_windows_3.3.10-stable\\flutter\\bin;C:\\Users\\Xuezh\\go\\bin;C:\\Users\\Xuezh\\go\\bin;C:\\Users\\Xuezh\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;H:\\mingw64\\mingw64\\bin;C:\\Users\\Xuezh\\AppData\\Roaming\\npm;H:\\zig\\zig-windows-x86_64-0.11.0-dev.1478+ce20ebb50', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'AMD64 Family 25 Model 33 Stepping 0, AuthenticAMD', 'PROCESSOR_LEVEL': '25', 'PROCESSOR_REVISION': '2100', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\Users\\Xuezh\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM COMMUNITY EDITION': 'G:\\PyCharm Community Edition 2022.1.3\\bin;', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\Xuezh\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\Xuezh\\AppData\\Local\\Temp', 'USERDOMAIN': 'SNOW', 'USERDOMAIN_ROAMINGPROFILE': 'SNOW', 'USERNAME': 'Xuezh', 'USERPROFILE': 'C:\\Users\\Xuezh', 'WINDIR': 'C:\\Windows', 'WSLENV': 'WT_SESSION::WT_PROFILE_ID', 'WT_PROFILE_ID': '{61c54bbd-c2c6-5271-96e7-009a87ff44bf}', 'WT_SESSION': '22b9dd54-ce17-49c3-ab1f-1fefd31b0c28', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.75.0', 'LANG': 'zh_CN.UTF-8', 'COLORTERM': 'truecolor', 'GIT_ASKPASS': 'c:\\Users\\Xuezh\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh', 'VSCODE_GIT_ASKPASS_NODE': 'C:\\Users\\Xuezh\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '--ms-enable-electron-run-as-node', 'VSCODE_GIT_ASKPASS_MAIN': 'c:\\Users\\Xuezh\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js', 'VSCODE_GIT_IPC_HANDLE': '\\\\.\\pipe\\vscode-git-d7cee28cf8-sock', 'VSCODE_INJECTION': '1'})