environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\Administrator\\AppData\\Roaming', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '133071863240246523', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'PC-20220627EJEQ', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DEVMGR_SHOW_DETAILS': '1', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'GIT_INSTALL_ROOT': 'C:\\Users\\Administrator\\scoop\\apps\\git\\current', 'GOPATH': 'C:\\Users\\Administrator\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\Administrator', 'LOCALAPPDATA': 'C:\\Users\\Administrator\\AppData\\Local', 'LOGONSERVER': '\\\\PC-20220627EJEQ', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\Administrator\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Python310\\Scripts\\;C:\\Python310\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;D:\\banzip\\Bandizip\\;C:\\ProgramData\\chocolatey\\bin;;D:\\page;D:\\GO\\bin;C:\\Program Files\\nodejs\\;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\;C:\\Users\\Administrator\\scoop\\shims;C:\\Users\\Administrator\\.cargo\\bin;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Administrator\\go\\bin;D:\\list\\x86_64-8.1.0-release-win32-sjlj-rt_v6-rev0\\mingw64\\bin;D:\\goasm\\Goasm;C:\\Users\\Administrator\\AppData\\Local\\bin\\NASM;D:\\zig;D:\\upx\\upx-4.0.2-win64;C:\\Users\\Administrator\\AppData\\Roaming\\npm;D:\\PYPY', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 151 Stepping 5, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9705', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'D:\\我的文档\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'USERDOMAIN': 'PC-20220627EJEQ', 'USERDOMAIN_ROAMINGPROFILE': 'PC-20220627EJEQ', 'USERNAME': 'Administrator', 'USERPROFILE': 'C:\\Users\\Administrator', 'WINDIR': 'C:\\Windows', 'WSLENV': 'WT_SESSION::WT_PROFILE_ID', 'WT_PROFILE_ID': '{61c54bbd-c2c6-5271-96e7-009a87ff44bf}', 'WT_SESSION': 'a0e029fe-ec68-4000-8fb7-0fe59f7d4be7', 'ZES_ENABLE_SYSMAN': '1'})